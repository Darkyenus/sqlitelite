import java.util.regex.Pattern

plugins {
    id 'de.undercouch.download' version '5.6.0'
    id 'com.android.library' version '8.7.3'
    id 'maven-publish'
}

String SQLITE_SOURCE_URL = "https://www.sqlite.org/2023/sqlite-amalgamation-3410000.zip"
String SQLITE_VERSION = "3.41.0"

String LIB_GROUP = "com.darkyen"
String LIB_NAME = "sqlitelite"
String LIB_VERSION = "${SQLITE_VERSION}.0"


android {
    compileSdk 34
    ndkVersion '28.0.12916984'

    defaultConfig {
        minSdkVersion 21
        versionName = LIB_VERSION
        namespace = LIB_GROUP+"."+LIB_NAME
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-rules.pro'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        aarMetadata {
            minCompileSdk = 30 // Untested
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    // https://developer.android.com/studio/test/command-line
    // Run ./gradlew connectedAndroidTest to run the tests.
    // Results are in build/reports/androidTests/connected/index.html
    // The benchmark "test" is suppressed by default, you may want to remove the @Suppress annotation to run it.
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

group LIB_GROUP
version LIB_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = LIB_GROUP
                artifactId = LIB_NAME
                version = LIB_VERSION
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.9.1'

    androidTestImplementation 'com.github.requery:sqlite-android:3.39.2'
    androidTestImplementation 'androidx.sqlite:sqlite:2.4.0'
    androidTestImplementation 'androidx.core:core:1.15.0'

    androidTestImplementation 'androidx.test:core:1.6.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestUtil 'androidx.test:orchestrator:1.5.1'
}

String SQLITE_ZIP_NAME
{
    def matcher = Pattern.compile(".*/(.+)\\.zip").matcher(SQLITE_SOURCE_URL)
    matcher.find()
    SQLITE_ZIP_NAME = matcher.group(1)
}

tasks.register('downloadSqlite', Download) {
    src SQLITE_SOURCE_URL
    dest "src/main/jni/${SQLITE_ZIP_NAME}.zip"
    overwrite false
}

tasks.register('installSqlite', Copy) {
    dependsOn downloadSqlite
    from zipTree(downloadSqlite.dest).matching {
        include "*/sqlite3.*"
        eachFile {
            it.setPath(it.getName())
        }
    }
    includeEmptyDirs = false
    into 'src/main/jni/sqlite'
}

preBuild.dependsOn installSqlite

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.configureEach { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    failOnError false
}

// https://issuetracker.google.com/issues/207403732
tasks.configureEach { task ->
    if (task.name.startsWith("configureNdkBuildDebug")
            || task.name.startsWith("configureNdkBuildRelease")) {
        task.dependsOn preBuild
    }
}
