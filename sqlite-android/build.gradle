import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'de.undercouch.download'
    id 'com.android.library'
    id 'com.vanniktech.maven.publish' version '0.24.0'
}

android {
    compileSdk 33
    buildToolsVersion = "33.0.1"
    ndkVersion '25.1.8937393'

    defaultConfig {
        minSdkVersion 21
        versionName VERSION_NAME
        namespace "io.requery.android.sqlite"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-rules.pro'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.6.0'

    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}

ext {
    sqliteDistributionUrl = 'https://www.sqlite.org/2022/sqlite-amalgamation-3400100.zip'
}

tasks.register('downloadSqlite', Download) {
    src project.sqliteDistributionUrl
    dest 'src/main/jni/sqlite.zip'
}

tasks.register('installSqlite', Copy) {
    dependsOn downloadSqlite
    from zipTree(downloadSqlite.dest).matching {
        include '*/sqlite3.*'
        eachFile { it.setPath(it.getName()) }
    }
    into 'src/main/jni/sqlite'
}

preBuild.dependsOn installSqlite

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.configureEach { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    failOnError false
}

// https://issuetracker.google.com/issues/207403732
tasks.configureEach { task ->
    if (task.name.startsWith("configureNdkBuildDebug")
            || task.name.startsWith("configureNdkBuildRelease")) {
        task.dependsOn preBuild
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.DEFAULT, /* automaticRelease */ true)
    signAllPublications()
}
